[{"title":"maven打包配置","url":"/2022/08/02/maven打包配置/","content":"\n## 指定mainClass和classpath\n\n```xml\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-jar-plugin</artifactId>\n    <version>3.2.2</version>\n    <configuration>\n        <archive>\n            <manifest>\n                <addClasspath>true</addClasspath>\n                <classpathPrefix>lib/</classpathPrefix>\n                <mainClass>fun.lovexy.demo.Start</mainClass>\n            </manifest>\n        </archive>\n    </configuration>\n</plugin>\n```\n\n## 拷贝依赖到指定目录\n\n将依赖拷贝到lib下\n```xml\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-dependency-plugin</artifactId>\n    <executions>\n        <execution>\n            <phase>package</phase>\n            <goals>\n                <goal>copy-dependencies</goal>\n            </goals>\n            <configuration>\n                <outputDirectory>${project.build.directory}/lib</outputDirectory>\n            </configuration>\n        </execution>\n    </executions>\n</plugin>\n```\n\n## 将依赖打包到一起\n\n```xml\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-assembly-plugin</artifactId>\n    <configuration>\n        <archive>\n            <manifest>\n                <mainClass>fun.lovexy.demo.Start</mainClass>\n            </manifest>\n        </archive>\n        <descriptorRefs>\n            <descriptorRef>jar-with-dependencies</descriptorRef>\n        </descriptorRefs>\n    </configuration>\n    <executions>\n        <execution>\n            <phase>package</phase>\n            <goals>\n                <goal>single</goal>\n            </goals>\n        </execution>\n    </executions>\n</plugin>\n```\n\n## 打包源码\n\n```xml\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-source-plugin</artifactId>\n    <executions>\n        <execution>\n            <phase>package</phase>\n            <goals>\n                <goal>jar</goal>\n            </goals>\n        </execution>\n    </executions>\n</plugin>\n```\n","tags":["maven"]},{"title":"Mongodb Database Tools使用","url":"/2022/07/24/Mongodb Database Tools使用/","content":"\n# Mongodb Database Tools使用\n\n下载地址：[Mongodb Database Tools](https://www.mongodb.com/try/download/database-tools)\n\n## mongodump\n\n使用这个可以导出数据原始的二进制数据\n\n一般可以使用下面的语句进行某个集合数据的导出，还可以加入查询条件导出指定的数据。\n```shell\nmongodump -h 127.0.0.1:27017 -d testdb -c user_collection -o ./outdate --gzip -q '{\\\"name\\\":\\\"zhangsan\\\"}'\n```\n\n## mongorestore\n\n使用`mongodump`导出的数据需要使用`mongorestore`恢复到指定的数据库的集合里\n```shell\nmongorestore -h 127.0.0.1:27017 -d testdb -c user_collection --dir ./outdate/testdb/user_collection.bson.gz --gzip\n```\n","tags":["MongoDB"]},{"title":"颜艺大师阿尼亚(间谍过家家)","url":"/2022/07/03/颜艺大师阿尼亚(间谍过家家)/","content":"\n不定时更新\n\n<img title=\"阿尼亚-啊\" src=\"/img/颜艺大师阿尼亚(间谍过家家)/阿尼亚-啊.gif\" width=\"96\" height=\"96\" />\n<img title=\"阿尼亚-沉默\" src=\"/img/颜艺大师阿尼亚(间谍过家家)/阿尼亚-沉默.gif\" width=\"96\" height=\"96\" />\n<img title=\"阿尼亚-地球毁灭了\" src=\"/img/颜艺大师阿尼亚(间谍过家家)/阿尼亚-地球毁灭了.gif\" width=\"96\" height=\"96\" />\n<img title=\"阿尼亚-微笑\" src=\"/img/颜艺大师阿尼亚(间谍过家家)/阿尼亚-微笑.gif\" width=\"96\" height=\"96\" />\n<img title=\"阿尼亚-无聊\" src=\"/img/颜艺大师阿尼亚(间谍过家家)/阿尼亚-无聊.gif\" width=\"96\" height=\"96\" />\n<img title=\"阿尼亚-无辜\" src=\"/img/颜艺大师阿尼亚(间谍过家家)/阿尼亚-无辜.gif\" width=\"96\" height=\"96\" />\n<img title=\"阿尼亚-这个\" src=\"/img/颜艺大师阿尼亚(间谍过家家)/阿尼亚-这个.gif\" width=\"96\" height=\"96\" />\n<img title=\"阿尼亚-阴险\" src=\"/img/颜艺大师阿尼亚(间谍过家家)/阿尼亚-阴险.gif\" width=\"96\" height=\"96\" />\n<img title=\"阿尼亚-高兴\" src=\"/img/颜艺大师阿尼亚(间谍过家家)/阿尼亚-高兴.gif\" width=\"96\" height=\"96\" />\n","tags":["表情包"]},{"title":"Git密钥管理工具","url":"/2022/06/30/Git密钥管理工具/","content":"\n# Git密钥管理工具\n\n## 问题的出现\n\n当你有多个github帐号并且你喜欢使用密钥认证方式的时候会遇到不同帐号密钥更换的问题。 githun的机制是一个rsa公钥只能被绑定一次，无法做到一对rsa密钥在两个以上的账户使用，只能在使用某个帐号时进行手动切换。\n每次更改配置文件是一件非常麻烦的事情，为了更优雅的切换密钥而编写了skm。\n\n## 介绍\n\n用Go语言编写，使用cobra用来处理命令行参数，使用promptui简化命令行的输入↑↓键选择要切换的密钥即可。\n\n项目地址：[skm](https://github.com/lovexy-fun/skm)\n\n## 使用说明\n\n可以直接在 [release](https://github.com/lovexy-fun/skm/releases) 页面下载对应操作系统的版本，如果您熟悉Go语言也可以使用源码自行构建。\n\n### skm\n\n使用`skm`命令可以查看当前正在使用的key\n\n输入\n\n```shell\nskm\n```\n\n输出\n\n```shell\nEffective key: testkey\n```\n\n### 帮助\n\n输入\n\n```shell\nskm -h\n```\n\n输出\n\n```shell\nSSH key manager\n\nUsage:\n  skm [flags]\n  skm [command]\n\nAvailable Commands:\n  add         Add a key to manager\n  del         Delete a key from manager\n  help        Help about any command\n  ls          List all keys\n  sel         Choose a key to make it effective\n\nFlags:\n  -h, --help   help for skm\n\nUse \"skm [command] --help\" for more information about a command.\n```\n\n### 添加\n\n向管理器添加一个私钥\n\n例如:\n\n```shell\nskm add -f ./id_rsa -n testkey\n```\n\n### 删除\n\n从管理器里删除一个私钥\n\n例如:\n\n```shell\nskm del\n#然后按↑/↓选择要删除的私钥\n```\n\n### 列出所有\n\n列出所有私钥\n\n例如:\n\n```shell\nskm ls\n```\n\n### 选择\n\n选择一个私钥使其生效\n\n例如:\n\n```shell\nskm sel\n#然后按↑/↓选择要删除的私钥\n```\n\n## Bug反馈&意见建议\n\n[Issues](https://github.com/lovexy-fun/skm/issues)\n","tags":["软件"]},{"title":"明御助手","url":"/2022/06/29/明御助手/","content":"\n# MingYuAssistant\n\n> 明御助手\n>\n> 简化明御运维审计与风险控制系统的登录\n\n<img src=\"/img/明御助手/1.png\"/>\n\n看到上面你大概就知道这个插件的用途了\n\n项目地址：[MingYuAssistant](https://github.com/lovexy-fun/MingYuAssistant)，欢迎Start。\n\n# 使用说明\n\n## 1️⃣安装\n\n### 一、油猴脚本插件安装\n\n在线安装：[Chrome插件商店安装](https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo) | [Edge插件商店安装](https://microsoftedge.microsoft.com/addons/detail/tampermonkey/iikmkjmpaadaobahmlepeloendndfphd)\n\n---\n\n如果无法在线安装，可以选择离线安装：\n\n1. 下载仓库中提供的tampermonkey安装包：[tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo_v4.16.1.crx](https://raw.githubusercontent.com/lovexy-fun/MingYuAssistant/master/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo_v4.16.1.crx)\n2. 打开浏览器插件管理页面 `chrome://extensions/` | `edge://extensions/`，将下载好的crx文件拖拽到页面上。\n\n### 二、脚本安装\n\n需要安装三个脚本 [明御助手](https://raw.githubusercontent.com/lovexy-fun/MingYuAssistant/master/src/main.user.js) | [明御助手（jsOTP）](https://raw.githubusercontent.com/lovexy-fun/MingYuAssistant/master/src/jsOTP.user.js) | [明御助手（userData）](https://raw.githubusercontent.com/lovexy-fun/MingYuAssistant/master/src/userData.user.js)\n\n## 2️⃣配置\n\n### 一、匹配地址修改\n安装完成在Tampermonkey的管理面板里编辑 **明御助手**、**明御助手（jsOTP）** 和 **明御助手（userData）**\n\n点击脚本名称可以进行编辑，三个脚本都需要修改匹配地址，在脚本代码中找到头部的\n\n```javascript\n// @match        https://127.0.0.1/*\n```\n将127.0.0.1替换为内网的明御系统的地址，按`Ctrl+S`保存。三个脚本都需要进行修改。\n\n### 二、用户自定义配置\n\n**明御助手（userData）** 脚本是存储账号密码和用户配置的脚本，仅需要以规范格式填写自己的账号密码即可\n\n```javascript\n//在代码中此段代码可以修改\nvar data = {\n    //通用配置\n    config: {\n        //手机令牌刷新间隔，单位秒\n        appKeyRefresh: 1,\n        //页面刷新间隔，为了保持登录状态，0为不刷新，单位分钟\n        pageRefresh: 0\n    },\n    //系统登录账户\n    loginAccount: {\n        username: \"TestAccount\",\n        password: \"TestPassword\",\n        //手机令牌密钥，可以为空\n        appKey: \"\"\n    },\n    hostAccount: {\n        //配置某台服务器的ip，制定这个服务器的登录名和密码，如果是数据库可以指定servicename字段，servicename可以不填写。\n        \"127.0.0.1\": {\n            //登录名\n            acctname: \"test\",\n            //密码\n            pwd: \"test\",\n            //数据库（oracle）或资产列表（db2），非必要字段可以不配置\n            servicename: \"\"\n        }\n        //可以在此处继续添加服务器，没有数量限制，注意JavaScript的代码规范，例如：\n        ,\"192.168.1.1\": {\n            acctname: \"test2\",\n            pwd: \"test2\",\n            servicename: \"database_server_name\"\n        }\n    }\n};\n```\n\n## 3️⃣使用\n\n完成安装和配置后，访问明御运维审计与风险控制系统登录页面会在右下角有悬浮的 **填写账号密码** 按钮，点击按钮就能自动填写登录帐号和密码。\n\n在登录服务器时，先选中要登录的服务器打开密码输入弹窗，点击 **填写账号密码** 就可以自动填写。\n\n## 4️⃣AppKey\n\n系统可以使用手机APP口令验证登录，是OTP(One Time Password)的应用，一般使用 **Google Authenticator** 软件来生成，但是其导出的二维码中的链接是经过处理的，无法直接得到密钥。通常我们可以借助 [otpauth](https://github.com/dim13/otpauth) 这个工具来解析出密钥，也可以使用 [Aegis](https://github.com/beemdevelopment/Aegis) 软件来解析\n\n# 优化改造\n\n如果不满足您的需求请fork后自行优化改造。参考文档：[Tampermonkey Docs](https://www.tampermonkey.net/documentation.php)\n\n# 其他\n\n请妥善保管您的密码，此脚本没有网络访问权限，并不会偷取您的密码。\n\n如果安全策略严格，不允许使用此脚本，请主动卸载。\n\n编写此脚本的目的是简化自己的登录过程，在此分享仅用于技术研究。\n","tags":["插件"]},{"title":"ASM小助手卸载","url":"/2021/12/28/ASM小助手卸载/","content":"\n# ASM小助手卸载\n\n## 写在前的\n\n> 声明：本文仅仅是为了技术学习与研究，请勿胡搞瞎搞\n\n有些公司内网的上网认证是用的ASM小助手，不过有时候用自己电脑接入公司内网可能会主动下载到ASM入网小助手的安装包。\n\n如果一不小心双击了安装包，软件就会自动安装，这个软件是无法在`控制面板>程序卸载`里卸载的，并且可能会禁用我们的U盘。\n\n虽然正常方式无法卸载，但是我们可以通过不正常的方式卸载。\n\n卸载思路来源于\n\n> 上网小助手IsAgent卸载程序破解\n> https://www.52pojie.cn/thread-1428177-1-1.html\n> (出处: 吾爱破解论坛)\n\n教程仅供学习和参考，解决私人设备的问题，请勿他用。\n\n## 卸载\n\n程序安装目录下会有一个**IsaSetup.exe**文件，这个程序就可以为我们提供卸载功能，只不过需要输入验证码（这个验证码一般是相关的管理人员才知道的）如图：\n\n![](img/ASM小助手卸载/1.png)\n\n\n那么我们是不是可以用[Ollydbg](https://www.52pojie.cn/thread-350397-1-1.html)来看一下，打开任务管理器找到**IsaHelp**进程，然后右击打开文件所在位置\n\n![](img/ASM小助手卸载/2.png)\n\n\n来到安装目录下我们可以看到有一个名为**IsaSetup.exe**的文件\n\n![](img/ASM小助手卸载/3.png)\n\n\n我们双击运行这个程序会弹出一个窗口，如图：\n\n![](img/ASM小助手卸载/4.png)\n\n\n那么我们加上`-remove`参数是不是就可会弹出卸载界面，当加上参数运行后弹出了前文中输入验证码的界面。\n\n接下来用Ollydbg打开这个文件(Ollydbg需要管理员权限运行)\n\n![](img/ASM小助手卸载/5.png)\n\n\n打开时要注意加上`-remove`参数\n\n![](img/ASM小助手卸载/6.png)\n\n\n打开后在主窗口右击进行查找参考文本，如图：\n\n![](img/ASM小助手卸载/7.png)\n\n\n然后拖动滚动条找到如下图所示的文字信息，并双击这一行\n\n![](img/ASM小助手卸载/8.png)\n\n\n双击会会跳转到主窗口，我们可以看到选中行上面有一条`0F85 7C000000 jnz IsaSetup.00402E13`指令\n\n![](img/ASM小助手卸载/9.png)\n\n\n`jnz`是汇编条件转移指令，那么我们将条指定改为`jz`是不是就变成了与原来相反的结果，即不需要验证码。双击这条指令后会弹出窗口在输入框里将jnz改为jz，并点击汇编按钮，点完按钮后窗口不会消失需要点取消。\n\n![](img/ASM小助手卸载/10.png)\n\n\n完成操作后会发现这一条变红了，`jnz`也变成了`je`\n\n![](img/ASM小助手卸载/11.png)\n\n\n接来下我们就可以按F9运行试一下了，经过几秒的等待果然出现了我们想要的结果\n\n![](img/ASM小助手卸载/12.png)\n\n\n点击确定就可以进行卸载了，卸载后可能会提示重启系统。\n\n## 解除U盘禁用\n\n当我们满怀欣喜得重启我们的电脑并插入U盘后发现依然无法识别到我们的U盘，这里还需要删除注册表的一个值\n\n打开注册表找到`\\HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Class\\{36fc9e60-c465-11cf-8056-444553540000}`\n\n我们可能会看到有LowerFilters_Redir项，值为IsdUsb，将这一项删除（建议导出备份）后应该就可以识别到U盘了，如果还识别不到U盘就重启一下电脑。\n\n![](img/ASM小助手卸载/13.png)\n\n\n## 写在后的\n\n到这里基本上卸载了小助手并解除了U盘的禁用，这种卸载方式是在万般无奈的情况下使用的，即自己的电脑不小心装了小助手并且公司相关管理人员不给处理。请不要使用此方法卸载公司资产机器上的小助手，如果使用此方法违反了公司的相关规定或产生了严重后果，请自行负责。\n","tags":["瞎搞"]},{"title":"Nginx反向代理访问内网服务器","url":"/2021/06/10/Nginx反向代理访问内网服务器/","content":"\n# Nginx反向代理访问内网服务器\n\n## 问题描述\n\n​    公司给配的台式机太垃圾了，不能访问外部网络就算了，还没有maven私服。近期项目不光得使用maven还得使用内网中的数据库之类，台式机太卡只能用自己的笔记本用爱发电。公司内网需要通过**ASM入网小助手**进行认证，一旦安装了**ASM入网小助手**笔记本就无法使用U盘了，并且还会乱改你的注册表。不想装小助手还想连接内网的数据库服务，那要怎么办呢？于是想到使用Nginx进行反向代理。\n\n## Nginx反向代理配置\n\n先上个配置\n\n```nginx\n#根节点下\nstream {\n    server {\n        listen 12345; #监听本机的端口\n        proxy_pass 192.168.123.123:3306; #代理内网的mysql\n    }\n}\n```\n\n使用上面配置启动nginx后，在本机就可以使用`127.0.0.1:12345`来连接mysql了。\n按照这种方法只要自己的笔记本接入内网，再在内网台式机上进行如此配置nginx，使用`[内网台式机IP]:12345`就可以连接内网的mysql了。\n\n## 优雅的进行Nginx反向代理配置\n\n​    直接改`nginx.conf`似乎不是很友好，配置多了也记不清哪个端口代理哪个服务了，同事要用的话还需要说明代理关系。于是乎就有了写一个nginx配置管理系统的想法，主要需求为：代理关系说明、代理配置、nginx控制。原本想使用Qt编写GUI界面程序，但是发现解析Nginx配置文件有点难受，于是使用SpringBoot+Layui+MybatisPlus+Sqlite做了一套web管理系统。设计思路是每次加载`nginx.conf`前根据数据库数据生成配置文件，由后端提供控制nginx停止与启动的接口。详细代码和release请参见[GitHub](https://github.com/lovexy-fun/reverse-proxy)。\n","tags":["瞎搞"]},{"title":"via浏览器和Alook浏览器插件安装","url":"/2021/04/16/via浏览器和Alook浏览器插件安装/","content":"\nvia和Alook是Android和IOS上可以支持JS插件的浏览器，一些常用的插件可以在via-app.cn上找到。但总会有人会思考点击安装按钮的是怎样将JS脚本代码安装到浏览器的。\n\n经过对页面代码的分析得到一下结论：\n\n浏览器向`window`上添加了一个`via`对象，安装某个脚本只需要调用方法即可，具体调用方法为：\n\n```javascript\nwindow.via.addon(Base64字符串)\n```\n\n**Base64字符串**是由固定格式的json字符串转码而来的，json格式如下：\n\n```json\n{\n    \"author\": \"作者，字符串格式，ASCII编码，例如：\\u8fd9\\u662f\\u4e2a\\u4f8b\\u5b50\",\n    \"code\": \"JS脚本Base64编码后的字符串\",\n    \"id\": 1,\n    \"name\": \"插件名称，字符串格式，同样是ASCII编码\",\n    \"url\": \"匹配的网址，一般使用*\"\n}\n```\n\n说明：\n\n1. 对于via浏览器来说author和name是非必须项，id、code和url为必须项。\n2. 对于Alook浏览器来说author、name和id是非必须，code和url都存在时插件识别为被动插件，只有code时识别为主动插件。\n3. 目前没有准确的文档，或许会存在一些上述格式中不存在的字段。\n\n其他补充：\n1. alook浏览器必须使用带填充base64字符串，例如：`alert()`不带填充编码为`YWxlcnQoKQ`带填充编码为`YWxlcnQoKQ==`。\n","tags":["瞎搞"]},{"title":"Windows10 快捷方式和程序图标变白问题","url":"/2021/01/18/Windows10快捷方式和程序图标变白问题/","content":"\n使用垃圾清理软件清理以后可能会出现部分软件图标变白的问题，用命令进行扫描修复什么的都不管用。\n\n按`win+r`键打开运行，输入`%localappdata%`后回车，打开一个文件夹。\n\n点击查看勾上隐藏的项目，然后就可以看到一个名为**IconCache.db**的文件，删除它。\n\n打开任务管理器选中**WIndows资源管理器**点击重新启动，稍等一会WIndows资源管理器重启完成后就会发现问题解决了。\n","tags":["踩坑"]},{"title":"远程连接linux上的mysql","url":"/2020/12/17/远程连接linux上的mysql/","content":"\nlinux服务器安装mysql之后需要进行一些配置操作才能够远程连接\n\n1. 修改**host**、**password**和**plugin**字段\n\n   mysql5.7的user表是没有password的，变成了authentication_string字段。\n\n   plugin需要改为mysql_native_password才能使用密码进行连接。\n\n   ```sql\n   update user set host='%',authentication_string=password('要修改的密码'),plugin='mysql_native_password' where user='root';\n   ```\n\n2. 修改配置文件中的**bind-address**\n\n   将配置文件中的`bind-address=127.0.0.1`改为`bind-address=0.0.0.0`\n","tags":["踩坑"]},{"title":"Git命令集","url":"/2020/11/10/Git命令/","content":"\n# Git命令集\n\n> 来自于阿里云定制鼠标垫，转为电子版方便以后参考\n\n## 配置文件\n\n| 命令                                                       | 说明                                                         |\n| ---------------------------------------------------------- | ------------------------------------------------------------ |\n| git config -l                                              | 查看当前生效的配置信息                                       |\n| git config \\[--global \\| --system] -e                       | 编辑配置文件，--global：全局级，--system：系统级，默认本地级 |\n| git config \\[--global \\| --system] \\[--add] \\<name> \\<value> | 设置单值或多值（--add）配置项                                |\n| git config \\[--global \\| --system] --unset \\<name>          | 删除配置项                                                   |\n| git config \\[--global \\| --system] \\[--get-all] \\<name>      | 查询单值或多值（--get-all）配置项                            |\n\n## 创建版本库\n\n| 命令                                 | 说明               |\n| ------------------------------------ | ------------------ |\n| git init \\[--bare] \\<仓库路径>        | 创建一个新仓库     |\n| git clone \\<远程仓库网址> [本地目录] | 克隆远程仓库到本地 |\n\n## 修改和提交\n\n| 命令                                          | 说明                             |\n| --------------------------------------------- | -------------------------------- |\n| git status                                    | 查看本地仓库的状态               |\n| git diff                                      | 查看本地文件改动                 |\n| git diff --cached                             | 查看暂存区文件改动               |\n| git diff \\<版本>                              | 查看本地文件和指定版本之间的差异 |\n| git add \\<路径>                               | 把本地文件的改动添加到暂存区     |\n| git add -p                                    | 选择本地部分修改加入暂存区       |\n| git add -u                                    | 仅添加已被跟踪文件的本地修改     |\n| git add -A                                    | 添加本地所有的改动到暂存区       |\n| git mv \\<源文件> \\<目标文件>                  | 重命名指定的文件或者文件夹       |\n| git rm \\<文件>                                | 删除指定文件                     |\n| git rm --cached \\<文件>                        | 只删除暂存区文件，不删除本地文件 |\n| git clean -i                                  | 清理本地文件（-i进入交互式界面） |\n| git commit -m \\<描述信息> [-m \\<描述信息>...] | 提交并使用指定描述作为提交说明   |\n| git commit --amend                            | 修补当前提交                     |\n| git commit --fixup \\<提交>                     | 修补历史提交                     |\n\n## 查看提交日志\n\n| 命令                                   | 说明                                             |\n| -------------------------------------- | ------------------------------------------------ |\n| git log                                | 打印所有的提交记录                               |\n| git log --oneline \\<版本1>..\\<版本2>   | 打印\\<版本1>到\\<版本2>新增提交，每个提交显示一行 |\n| git log -p \\[\\<路径>]                   | 显示日志及详细的提交补丁                         |\n| git blame \\[-Lm,+n]\\[\\<版本>] --\\<路径> | 对文件逐行显示最近一次的修改信息                 |\n\n## 撤销操作\n\n| 命令                        | 说明                                                         |\n| --------------------------- | ------------------------------------------------------------ |\n| git reset                   | 撤销暂存区改动                                               |\n| git reset --soft \\<版本>     | 软重置：仅修改HEAD指向，暂存区和本地文件均不修改             |\n| git reset \\[--mixed] \\<版本> | 混合重置：本地文件不修改，但HEAD指向的暂存区都修改           |\n| git reset --hard \\<版本>     | 硬重置：HEAD指向、暂存区、本地文件全都修改                   |\n| git revert \\[-m 1] \\<版本>    | 生成一个新的提交来撤销某次历史提交（-m参数用于撤销合并提交） |\n\n## 远程操作\n\n| 命令                          | 说明                   |\n| ----------------------------- | ---------------------- |\n| git remote add \\<别名> \\<URL> | 添加一个远程仓库       |\n| git remote -v                 | 查看远程仓库的详细信息 |\n| git remote remove \\<别名>      | 删除指定名称的远程仓库 |\n| git remote set-url \\<别名>  \\<新URL> | 修改远程仓库的URL地址 |\n| git fetch \\[--prune] \\<远程仓库别名> | 获取远程仓库引用，使用--prune会清理本地缓存的已由远程删除的引用 |\n| git fetch \\<远程仓库别名> \\<分支名> | 将远程仓库指定分支的最新版本取回本地 |\n| git pull \\<远程仓库别名> \\<分支名> | 拉取远程仓库某个分支的更新，再与本地的指定分支合并 |\n| git push \\<远程仓库别名> \\<本地分支名>:\\<远程分支名> | 把本地仓库的分支推送到远程仓库的指定分支 |\n| git push \\<远程仓库别名> --delete \\<远程分支名> | 删除指定的远程仓库的分支 |\n| git push \\<远程仓库的别名> \\<标签名称> | 将指定的标签提交到远程仓库 |\n| git push \\<远程仓库的别名> --tags | 将本地所有的标签全部都提交到远程仓库 |\n\n## 分支与标签\n\n| 命令                                                         | 说明                                       |\n| ------------------------------------------------------------ | ------------------------------------------ |\n| git branch \\[-a\\]                                            | 查看本地分支                               |\n| git branch \\<新分支\\> \\[\\<基线\\>\\]                           | 从基线创建新分支                           |\n| git branch -d \\<本地分支名\\>                                 | 删除指定分支                               |\n| git checkout \\<本地分支名\\>                                  | 切换到指定分支                             |\n| git checkout -b \\<新分支\\> <基线>                            | 创建并切换到新分支                         |\n| git checkout \\<版本\\> --\\<文件\\>                             | 用指定版本的文件覆盖本地文件               |\n| git tag                                                      | 查看本地所有标签                           |\n| git tag -m \\<标签描述信息\\> \\<标签名称\\> \\[\\<版本\\>\\]        | 基于指定提交（未指定为最新提交）创建新标签 |\n| git tag -s -u \\<key-id\\> -m \\<标签描述信息\\> \\<标签名称\\> \\[\\<版本\\>\\] | 创建带有PGP签名的标签                      |\n| git tag -d \\<标签名称\\>                                      | 删除指定标签                               |\n\n\n\n## 合并与变基\n\n| 命令                                                         | 说明                                       |\n| ------------------------------------------------------------ | ------------------------------------------ |\n| git merge \\<分支名称\\>                                       | 把指定的分支合并到当前所在的分支下         |\n| git merge (--continue\\|--abort\\|--quit)                      | 合并冲突                                   |\n| git rebase \\<分支名称\\>                                      | 变基：把当前分支改动在新的基线上重放       |\n| git rebase -i --autosquash \\<分支名称\\>                      | 交互式变基，通常用于整理提交               |\n| git rebase (--continue\\|--skip\\|--abort\\|--quit\\|--edit -todo) | 变基暂停后，选择继续、跳过、终止或编辑任务 |\n","tags":["git"]},{"title":"js原生导出excel和csv","url":"/2019/11/22/js原生导出excel和csv/","content":"\n> 严格意义来说并不是真正的excel文件，只是可以用excel打开查看而已，实际上的格式是逗号分隔文件即csv文件。\n\n这里有几个坑要说一下：\n\n1. 不加Unicode的utf8头部标识excel打开文件会乱码。\n2. 加了Unicode的utf8头部标识可能会导致文件读取的时候遇到非法字符。\n3. IE不支持a标签的download属性。\n4. 这里用的是URL编码，还可以使用base64和blob。\n\n> Unicode头部标识：\n>\n> EF BB BF\tUTF-8 \n> FF FE \tUTF-16 aka UCS-2, little endian \n> FE FF \tUTF-16 aka UCS-2, big endian \n> 00 00 FF FE \tUTF-32 aka UCS-4, little endian. \n> 00 00 FE FF \tUTF-32 aka UCS-4, big-endian.\n\n```javascript\n/*\ndata = {\n\tthead : [\"第一列\", \"第二列\", \"第三列\"],\n\ttbody : [\n\t\t[\"1\", \"2\", \"3\"],\n\t\t[\"4\", \"5\", \"6\"],\n\t]\n}*/\n/**\n * 导出excel和csv\n * @param data 要导出的数据，需要是上面的数据格式，当然也可以重写这个方法自己定义数据格式\n * @param name 文件名\n * @param type 文件类型 xls或csv\n * @returns\n */\nfunction exportData(data, name, type) {\n\tvar dataStr = \"\";\n\t//Unicode头部标识\n\tvar utf8Head = \"%EF%BB%BF\";\n\t//uri文件资源类型\n\tvar csvUri = \"data:text/csv;charset=utf-8,\";\n\tvar xlsUri = \"data:application/vnd.ms-excel;charset=utf-8,\";\n\t//创建一个a标签，用来下载\n\tvar oa = document.createElement(\"a\");\n\tvar col = data.thead.length;\n\tvar row = data.tbody.length;\n\t\n\t//数据构造\n\tfor(var i = 0; i < col; i++) {\n\t\tdataStr += data.thead[i];\n\t\tif(i < col - 1)\n\t\t\tdataStr += \",\"\n\t}\n\tdataStr += \"\\n\";\n\t\n\tfor(var i = 0; i < row; i++) {\n\t\tfor(var j = 0; j < col; j++) {\n\t\t\tdataStr += data.tbody[i][j];\n\t\t\tif(j < col - 1)\n\t\t\t\tdataStr += \",\";\n\t\t}\n\t\tdataStr += \"\\n\";\n\t}\n\tif(type === \"csv\") {\n\t\t//拼接编码，用url编码就可以，layui就是这种方式\n\t\toa.href = csvUri + utf8Head + encodeURIComponent(dataStr);\n\t\toa.download = name + \".csv\";\n\t} else if(type === \"xls\") {\n\t\toa.href = xlsUri + utf8Head + encodeURIComponent(dataStr);\n\t\toa.download = name + \".xls\";\n\t} else {\n\t\treturn false;\n\t}\n\t//触发链接点击事件进行下载\n\toa.click();\n}\n```\n","tags":["JavaScript"]},{"title":"Ubuntu创建应用快捷方式","url":"/2018/11/01/Ubuntu创建应用快捷方式/","content":"\n# Ubuntu创建应用快捷方式\n\n新建一个.desktop文件\n\n```shell\nvi eclipse.desktop\n```\n\n然后又进行编辑\n\n```ini\n[Desktop Entry]\nEncoding=UTF-8\nName=eclipse\nGenericName=eclipse IDE\nComment=java ide\nExec=/etc/eclipse/eclipse\nIcon=/etc/eclipse/icon.xpm\nTerminal=false\nType=Application\nCategories=Application;Development;\n```\n\n| 关键字          | 含义                   | 参数            |\n| --------------- | ---------------------- | --------------- |\n| [Desktop Entry] | 标识                   |                 |\n| Encoding        | 编码                   | UTF-8等编码格式 |\n| GenericName     | 描述                   | 一句描述        |\n| Comment         | 注释                   | 一句注释        |\n| Exec            | 可执行文件目录及文件名 | 文件名及目录    |\n| Icon            | 图标目录及图标名       | 文件名及目录    |\n| Terminal        | 是否启动终端           | true/false      |\n| Type            | 启动器类型             |                 |\n| Categories      | 应用类型               |                 |\n\n编写完后保存退出，然后执行\n\n```shell\nchmod +x eclipse.desktop\n```\n\n如果想让这个快捷方式在全部应用里能找到，就把这个文件拷贝到**/usr/share/application/**下\n","tags":["瞎搞","linux"]}]